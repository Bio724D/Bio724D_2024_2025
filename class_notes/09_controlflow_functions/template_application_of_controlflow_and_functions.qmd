---
title: "Bio 724D: Applying control flow and functions to a parsing problem"
format: 
  html:
    toc: true
    embed-resources: true
---



## Introduction

During the first half of our class session we introduced to the concepts and syntax for writing control flow statements and functions in R.  We now turn to a motivating example to practice these skills.


## Problem space: Analyzing the structure of poems

The problem we're going to use for illustration centers around text parsing. We'll also build on some of the regular expression concepts we introduced in our prior class session. Parsing information out of textual files or data fields is a very common problem in many areas of scientific computing.  In bioinformatics, parsing string-based representations of nucleotide or amino acid sequences is perhaps the most common example, but parsing challenges are frequently encountered when dealing with tasks such as working with ontologies, mining observer data (e.g. behavioral or field experiments), dealing with specialized data formats, etc. For today's session we've chosen a non-biological parsing example, but you will hopefully see the parallel and potential of how these concepts can be applied in biological contexts.

The specific problem we'll tackle is characterizing the structure of poems!  We will attempt to write a set of functions that accomplish the following tasks:

1. Break up a poem into stanzas

2. For each stanza:

  - Count the number of lines in the stanza
  - Count the the number of words in the stanza
  - Count the number of alphanumeric characters in the stanza
  - Count the number of punctuation mark characters in stanza

## Libraries

```{r}
library(tidyverse)
```


## Data 

### Jabberwocky

```{r}
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/Lewis_Carroll-Jabberwocky.txt

jabberwocky <- read_file("Lewis_Carroll-Jabberwocky.txt")

# important to look via print to understand invisible characters
print(jabberwocky)

# if you want to see the file as formatted
cat(jabberwocky)
```


## Sketching out a solution

One of the key reasons to write functions is that it allows us to decompose complex problems into smaller pieces. We encourage you to use small functions to solve key small tasks, and then to combine those function together as needed to solve bigger problems.

Let's look at how we might represent that idea for the poem analysis problem. We'll refer to the functions block as mock or pseudo-functions because they don't do anything (yet). Instead they help us think about the logic of our analysis.


```{r}
# Write mock functions here
analyze_poem <- function(poem) { 
}

get_stanzas <- function() { }
count_lines <- function() { }
count_words <- function() { }
count_alphabetical <- function() { }
count_punctuation <- function() { }
```

We can now "test" our mock functions as follows:

```{r}
analyze_poem(jabberwocky)
```

We got a result (and some printed output). The result isn't meaningful yet, but we'll build up the sub--functionality below.


### 2nd pseudo-code draft, starting to think in terms data structures

Now that we have some basic structure in place, let's start to think about the input and output of each function.

```{r}

get_stanzas <- function(poem) {
  # input: a single string representing one or more stanzas, 
  #        stanzas separated by newlines
  # output: a vector of strings, each string representing a stanzas
}

count_lines <- function(stanza) {
  # input: a single string representing a single stanza
  #         each line separated by a newline
  # output: an integer giving the number of lines in the stanza
}

count_words <- function(stanza) {
  # input: a single string representing a single stanza
  # output: an integer giving the number of words in the stanza
}

count_alphabetical<- function(stanza) {
  # input: a single string representing a single stanza
  # output: an integer giving the number of alphabetical characters in the stanza
}

count_punctuation <- function(stanza) {
  # input: a single string representing a single stanza
  # output: an integer giving the number of punctuation characters in the stanza
}


analyze_poem <- function(poem) {
  # input: a single string representing one or more stanzas, 
  #        stanzas separated by newlines
  # output: a data frame, each row representing a stanza and the corresponding
  #        metrics calculated above
}

```


With these new mock functions, let's retest:

```{r}
analyze_poem(jabberwocky)
```


Nothing has changed in terms of actual functionality but now we can start to flesh things out.


## Get the stanzas 

The first goal is to split the poem into stanza.s We use `str_split_1`, searching for two successive newlines.



```{r}

get_stanzas <- function(poem) {
  # implement this!
}

# Always test your functions, hopefully with several inputs
stanzas <- get_stanzas(jabberwocky)
stanzas
```

* How could we make this more robust? What if there was a stray space on the empty line?


Once we've convinced ourselves that `get_stanzas` is working properly we can re-test `analyze_poem`. Note we don't have to change `analyze_poem` at all!

```{r}
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
```

Ah, now some actual functionality is emerging. Not that we have 7 stanzas and a row in our output data frame for each!


## Counting lines in a stanza

Now let's look at the problem of breaking each stanza into lines.

Again, this is easy for **one** stanza, as we can simply use `str_split_1` again with a different regex pattern.

```{r}
count_lines <- function(stanza) {
# implement this!
}

# ALWAY test!
count_lines(stanzas[1])
```


```{r}
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
```


## Counting words per stanza

Now we split each stanza into its consituent words:

```{r}
count_words <- function(stanza) {
# implement this!
}

# test your implementation!
count_words(stanzas[1])

```

Again, once we've satisfied that `count_words` is working correctly we can test `analyze_poem` again:

```{r}
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
```


## Counting alphabetical characters per stanza

Let's count both alphabetical and numeric characters:

```{r}
count_alphabetical <- function(stanza) {
  # implement this!
}

# test your implementation!
count_alphabetical(stanzas[1])
```

```{r}
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
```



## Counting punctuation per stanza

Finally, count punctuation:

```{r}
count_punctuation <- function(stanza) {
  # implement this!
}

# test your implementation!
count_punctuation(stanzas[1])

```

```{r}
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
```





# Test your function with some other inputs!

It looks like our functions are working pretty well. Let's do some additional tests by feeding other inputs to `analyze_poem`:



```{r}
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/Gabriela-Mistral_The-Stranger.txt

mistral <- read_file("Gabriela-Mistral_The-Stranger.txt")

# if you want to see the file as formatted
cat(mistral)
```

```{r}
analyze_poem(mistral)
```

