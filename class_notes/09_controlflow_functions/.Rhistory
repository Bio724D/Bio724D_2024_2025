parts <- list()
parts_cts <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_cts[i] <- length(current_part)
}
inputstr <- darwin # change this depending on what you're parsing
is_prose <- FALSE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
#regex_pattern <- "(?<!(Mrs?)|(Dr))(?<=[^A-Z]\\.)\\s"
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s"
}
parts <- list()
parts_cts <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_cts[i] <- length(current_part)
}
parts
str_view(paragraphs[1], "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+)
str_view(paragraphs[1], "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+")
str_view(paragraphs[1], "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+")
str_view(paragraphs[1], "\\.\\s+")
sentences1 <- str_split_1(paragraphs[1], "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+")
sentences1
sentences_per_paragraph = list()
sentencect_per_paragraph = integer(length(paragraphs))
for (i in 1:length(paragraphs)) {
current_sentence <-
str_split_1(paragraphs[i], "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+") |>
str_squish()
sentences_per_paragraph[[i]] <- current_sentence
sentencect_per_paragraph[i] <- length(current_sentence)
}
sentencect_per_paragraph
sentences_per_paragraph[[1]][1]
sentences_per_paragraph[[2]][4]
sentences_per_paragraph[[2]][3]
inputstr <- darwin # change this depending on what you're parsing
is_prose <- FALSE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_cts <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_cts[i] <- length(current_part)
}
parts
inputstr <- jabberwocky # change this depending on what you're parsing
is_prose <- TRUE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_cts <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_cts[i] <- length(current_part)
}
parts
inputstr <- jabberwocky # change this depending on what you're parsing
is_prose <- TRUE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_cts <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_cts[i] <- length(current_part)
}
parts
blocks[1]
inputstr <- jabberwocky # change this depending on what you're parsing
is_prose <- TRUE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_cts <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_cts[i] <- length(current_part)
}
parts
word(lines1)
lines1
lines1[1]
lines1[1] |> words()
lines1[1] |> word()
lines1 <- str_split_1(stanzas[1],"\n")
typeof(lines1)
length(lines1)
first_line <- lines1[1]
first_line
sentences1 <- str_split_1(paragraphs[1], "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+")
sentences1
first_sentence <- sentences1[1]
first_sentence
str_split_1(first_line)
str_split_1(first_line, "\\s")
str_split_1(first_sentence, "\\s")
str_extract_all(first_sentence, "[^[:punct:]|\\s")
str_extract_all(first_sentence, "[^[:punct:]|\\s]+")
str_extract_all(first_sentence, "[^[:punct:]|\\s]+") |> str_to_lower()
str_extract_all(first_sentence, "[^[:punct:]|\\s]+")
str_extract_all(parts, "[^[:punct:]|\\s]+")
str_extract_all(first_sentence, "[^[:punct:]|\\s]+")
str_extract_all(sentences1, "[^[:punct:]|\\s]+")
str_split_1(sentences1, "\\s")
str_split(sentences1, "\\s")
str_extract(sentences1, "[^[:punct:]|\\s]+")
str_extract(first_sentence, "[^[:punct:]|\\s]+")
str_extract_all(first_sentence, "[^[:punct:]|\\s]+")
stanzas
str_squish(stanzas)
stanzas
str_split(stanzas, "\n")
str_split(stanzas, "\n") |> str_squish()
str_split(stanzas, "\n")
str_extract_all(parts, "[^[:punct:]|\\s]+")
parts
str_extract_all(parts[1], "[^[:punct:]|\\s]+")
parts
str_extract_all(parts[[1]], "[^[:punct:]|\\s]+")
sentences_par1 <- str_split_1(paragraphs[1], "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+")
sentences_par1
first_sentence <- sentences_par1[1]
first_sentence
str_extract_all(sentences_par1, "[^[:punct:]|\\s]+")
parts[[1]]
str_extract_all(parts[[1]], "[^[:punct:]|\\s]+")
inputstr <- jabberwocky # change this depending on what you're parsing
is_prose <- TRUE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_cts <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_cts[i] <- length(current_part)
}
words_per_part <- list()
for (j in 1:length(parts)) {
words_per_part[[j]] <- str_extract_all(parts[[j]], "[^[:punct:]|\\s]+")
}
words_per_part
block_ct
parts_cts
words_per_part
words_per_part |> length()
inputstr <- jabberwocky # change this depending on what you're parsing
is_prose <- TRUE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_ct <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_ct[i] <- length(current_part)
}
words_per_part <- list()
for (j in 1:length(parts)) {
words_per_part[[j]] <- str_extract_all(parts[[j]], "[^[:punct:]|\\s]+")
}
# count words per part per block
word_cts <- list()
for (i in 1:block_ct) {
for (j in 1:parts_ct[i]){
word_cts[[i]][[j]] <- length(words_per_parts[[i]][[j]])
}
}
inputstr <- jabberwocky # change this depending on what you're parsing
is_prose <- TRUE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_ct <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_ct[i] <- length(current_part)
}
words_per_part <- list()
for (j in 1:length(parts)) {
words_per_part[[j]] <- str_extract_all(parts[[j]], "[^[:punct:]|\\s]+")
}
# count words per part per block
word_cts <- list()
for (i in 1:block_ct) {
for (j in 1:parts_ct[i]){
word_cts[[i]][[j]] <- length(words_per_part[[i]][[j]])
}
}
words_per_part
words_per_part[[1]]
words_per_part[[7]]
words_per_part[[7]][[1]]
inputstr <- jabberwocky # change this depending on what you're parsing
is_prose <- TRUE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_ct <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_ct[i] <- length(current_part)
}
words_per_part <- list()
for (j in 1:length(parts)) {
words_per_part[[j]] <- str_extract_all(parts[[j]], "[^[:punct:]|\\s]+")
}
# count words per part per block
word_cts <- list()
for (i in 1:block_ct) {
for (j in 1:parts_ct[[i]]){
word_cts[[i]][[j]] <- length(words_per_part[[i]][[j]])
}
}
inputstr <- jabberwocky # change this depending on what you're parsing
is_prose <- TRUE
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
if (is_prose) {
regex_pattern <- "\n"
} else {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
}
parts <- list()
parts_ct <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_ct[i] <- length(current_part)
}
words_per_part <- list()
for (j in 1:length(parts)) {
words_per_part[[j]] <- str_extract_all(parts[[j]], "[^[:punct:]|\\s]+")
}
# count words per part per block
word_cts <- list()
for (i in 1:block_ct) {
word_cts[[i]] <- list()
for (j in 1:parts_ct[[i]]){
word_cts[[i]][[j]] <- length(words_per_part[[i]][[j]])
}
}
word_cts
block_ct
parts_ct
word_cts
words_per_part
words_per_part[[7]]
length(words_per_part[[7]])
length(words_per_part[[7]][[1]])
length(words_per_part[[7]][])
length(words_per_part[7,1])
length(words_per_part[7])
length(words_per_part[[7,1]])
length(words_per_part[[7,]])
length(words_per_part[[7]])
length(words_per_part[[7]][[1:4]])
length(words_per_part[[7]][[1]])
length(words_per_part[[7]][1:4])
length(words_per_part[[7]][1])
length(words_per_part[[7]][2])
# define input
inputstr <- jabberwocky # change this depending on what you're parsing
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
# define whether your splitting prose or non-prose blocks
is_prose <- FALSE
if (is_prose) {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
} else {
regex_pattern <- "\n"
}
parts <- list()
parts_ct <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_ct[i] <- length(current_part)
}
words_per_part <- list()
for (j in 1:length(parts)) {
words_per_part[[j]] <- str_extract_all(parts[[j]], "[^[:punct:]|\\s]+")
}
# count words per part per block
word_ct <- list()
for (i in 1:block_ct) {
word_ct[[i]] <- list()
for (j in 1:parts_ct[[i]]){
word_ct[[i]][[j]] <- length(words_per_part[[i]][[j]])
}
}
block_ct
parts_ct
words_ct
# define input
inputstr <- jabberwocky # change this depending on what you're parsing
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
# define whether your splitting prose or non-prose blocks
is_prose <- FALSE
if (is_prose) {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
} else {
regex_pattern <- "\n"
}
parts <- list()
parts_ct <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_ct[i] <- length(current_part)
}
words_per_part <- list()
for (j in 1:length(parts)) {
words_per_part[[j]] <- str_extract_all(parts[[j]], "[^[:punct:]|\\s]+")
}
# count words per part per block
word_ct <- list()
for (i in 1:block_ct) {
word_ct[[i]] <- list()
for (j in 1:parts_ct[[i]]){
word_ct[[i]][[j]] <- length(words_per_part[[i]][[j]])
}
}
block_ct
parts_ct
words_ct
block_ct
parts_ct
words_ct
# define input
inputstr <- jabberwocky # change this depending on what you're parsing
blocks <- str_split_1(inputstr, "\n[ \t]*\n")
block_ct <- length(blocks)
# define whether your splitting prose or non-prose blocks
is_prose <- FALSE
if (is_prose) {
regex_pattern <- "(?<=[^A-Z|Mrs?|Drs?]\\.)\\s+"
} else {
regex_pattern <- "\n"
}
parts <- list()
parts_ct <- integer(length = block_ct)
for (i in 1:block_ct) {
current_part <-
str_split_1(blocks[i], pattern = regex_pattern) |>
str_squish()
parts[[i]] <- current_part
parts_ct[i] <- length(current_part)
}
words_per_part <- list()
for (j in 1:length(parts)) {
words_per_part[[j]] <- str_extract_all(parts[[j]], "[^[:punct:]|\\s]+")
}
# count words per part per block
words_ct <- list()
for (i in 1:block_ct) {
words_ct[[i]] <- list()
for (j in 1:parts_ct[[i]]){
words_ct[[i]][[j]] <- length(words_per_part[[i]][[j]])
}
}
block_ct
parts_ct
words_ct
block_ct
parts_ct
words_ct[[1]]
print("Block count:")
block_ct
print("Parts per block counts:")
parts_ct
print("Word count per part, first block:")
words_ct[[1]]
print("Block count:")
block_ct
print("Parts per block counts:")
parts_ct
cat("Word count per part, first block:")
words_ct[[1]]
cat("Block count:")
block_ct
cat("Parts per block counts:")
parts_ct
cat("Word count per part, first block:")
words_ct[[1]]
cat("Block count:", block_ct)
#block_ct
cat("Parts per block counts:")
parts_ct
cat("Word count per part, first block:")
words_ct[[1]]
print("Block count:", block_ct)
cat("Parts per block counts:")
parts_ct
cat("Word count per part, first block:")
words_ct[[1]]
cat("Block count:", block_ct, "\n")
cat("Parts per block counts:", parts_ct, "\n")
cat("Word count per part, first block:")
words_ct[[1]]
cat("Block count:", block_ct, "\n")
cat("Parts per block counts:", parts_ct, "\n")
cat("Word count per part, first block:")
print(words_ct[[1]])
cat("Block count:", block_ct, "\n")
cat("Parts per block counts:", parts_ct, "\n")
cat("Word count per part, first block:")
print(words_ct[[1]])
cat("Block count:", block_ct, "\n")
cat("Parts per block counts:", parts_ct, "\n")
cat("Word count per part, first block:\n")
print(words_ct[[1]])
cat("Block count:", block_ct, "\n")
cat("Parts per block counts:", parts_ct, "\n")
cat("Word count per part, first block:\n")
cat(words_ct[[1]])
cat("Block count:", block_ct, "\n")
cat("Parts per block counts:", parts_ct, "\n")
cat("Word count per part, first block:\n")
print(words_ct[[1]])
cat("Block count:", block_ct, "\n")
cat("Parts per block counts:", parts_ct, "\n")
cat("Word count per part, first block:\n\n")
print(words_ct[[1]])
cat("Block count:", block_ct, "\n\n")
cat("Parts per block counts:", parts_ct, "\n\n")
cat("Word count per part, first block:\n\n")
print(words_ct[[1]])
words_per_part[[1]]
