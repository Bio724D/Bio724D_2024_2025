for (i in 1:length(stanzas)) {
nlines <- count_lines(stanzas[i])
nwords <- count_words(stanzas[i])
nalpha <- count_alphabetical(stanzas[i])
npunct <- count_punctuation(stanzas[i])
df <- add_row(
df,
stanza = i,
num_lines = nlines,
num_words =  nwords,
num_alpha = nalpha,
num_punct = npunct
)
}
return(df)
}
analyze_poem("hello!")
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/jabberwocky.txt
jabberwocky <- read_file("jabberwocky.txt")
# important to look via print to understand invisible characters
print(jabberwocky)
# if you want to see the file as formatted
cat(jabberwocky)
get_stanzas <- function(poem) {
stanzas <- str_split_1(poem, "\n\n")
return (stanzas) # return the vector of stanzas
}
# test
stanzas <- get_stanzas(jabberwocky)
stanzas
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_lines <- function(stanza) {
lines <- str_split_1(stanza, "\n")
# print(lines)
return (length(lines))
}
# ALWAY test!
count_lines(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_words <- function(stanza) {
words <-
stanza |>
str_squish() |>
str_split_1("\\s")
#print(words)
return (length(words))
}
# test your implementation!
count_words(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_alphabetical <- function(stanza) {
return (str_count(stanza, "[:alnum:]"))
}
# test your implementation!
count_alphabetical(stanzas[1])
library(tidyverse)
get_stanzas <- function(poem) {
stanzas <- c("stanza1", "stanza2") # represent each stanza as its own string
print("parsing  stanzas")
# to be implemented
return (stanzas) # return the vector of stanzas
}
count_lines <- function(stanza) {
num_lines <- 0
print("counting lines")
# to be implemented
return (num_lines)
}
count_words <- function(stanza) {
num_words <- 0
print("counting words")
# to be implemented
return (num_words)
}
count_alphabetical<- function(stanza) {
num_alpha <- 0
print("counting alphabetical characters")
# to be implemented
return (num_alpha)
}
count_punctuation <- function(stanza) {
num_punct <- 0
print("counting punctuation characters")
return (num_punct)
}
analyze_poem <- function(poem) {
df <- tibble(
stanza = integer(),
num_lines = integer(),
num_words = integer(),
num_alpha = integer(),
num_punct = integer()
)
stanzas <- get_stanzas(poem)
for (i in 1:length(stanzas)) {
nlines <- count_lines(stanzas[i])
nwords <- count_words(stanzas[i])
nalpha <- count_alphabetical(stanzas[i])
npunct <- count_punctuation(stanzas[i])
df <- add_row(
df,
stanza = i,
num_lines = nlines,
num_words =  nwords,
num_alpha = nalpha,
num_punct = npunct
)
}
return(df)
}
analyze_poem("hello!")
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/jabberwocky.txt
jabberwocky <- read_file("jabberwocky.txt")
# important to look via print to understand invisible characters
print(jabberwocky)
# if you want to see the file as formatted
cat(jabberwocky)
get_stanzas <- function(poem) {
stanzas <- str_split_1(poem, "\n\n")
return (stanzas) # return the vector of stanzas
}
# test
stanzas <- get_stanzas(jabberwocky)
stanzas
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_lines <- function(stanza) {
lines <- str_split_1(stanza, "\n")
# print(lines)
return (length(lines))
}
# ALWAY test!
count_lines(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_words <- function(stanza) {
words <-
stanza |>
str_squish() |>
str_split_1("\\s")
#print(words)
return (length(words))
}
# test your implementation!
count_words(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_alphabetical <- function(stanza) {
return (str_count(stanza, "[:alnum:]"))
}
# test your implementation!
count_alphabetical(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_punctuation <- function(stanza) {
return (str_count(stanza, "[:punct:]"))
}
# test your implementation!
count_punctuation(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/cummings_anyone_lived_in_a_pretty_how_town.txt
cummings <- read_file("cummings_anyone_lived_in_a_pretty_how_town.txt")
# if you want to see the file as formatted
cat(cummings)
analyze_poem(cummings)
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/mistral_the_stranger.txt
mistral <- read_file("mistral_the_stranger.txt")
# if you want to see the file as formatted
cat(mistral)
analyze_poem(mistral)
seuss <- "One fish, two fish\nRed fish, blue fish"
analyze_poem(seuss)
analyze_poem <- function(poem) {
get_stanzas()
count_lines()
count_words()
count_alphabetical()
count_punctuation()
}
get_stanzas <- function() { print("getting stanzas")}
count_lines <- function() { print("counting lines")}
count_words <- function() { print("counting words")}
count_alphabetical <- function() { print("counting alphabetical")}
count_punctuation <- function() { print("counting punctuation")}
seuss <- "One fish, two fish\nRed fish, blue fish"
analyze_poem(seuss)
analyze_poem <- function(poem) {
get_stanzas()
count_lines()
count_words()
count_alphabetical()
count_punctuation()
}
get_stanzas <- function() { print("parsing stanzas")}
count_lines <- function() { print("counting lines")}
count_words <- function() { print("counting words")}
count_alphabetical <- function() { print("counting alphabetical")}
count_punctuation <- function() { print("counting punctuation")}
seuss <- "One fish, two fish\nRed fish, blue fish"
analyze_poem(seuss)
analyze_poem(seuss)
get_stanzas <- function(poem) {
# should return a vector of strings
stanzas <- c("stanza1", "stanza2") # represent each stanza as its own string
print("parsing  stanzas")
# to be implemented
return (stanzas) # return the vector of stanzas
}
count_lines <- function(stanza) {
# should return an integer
num_lines <- 0
print("counting lines")
# to be implemented
return (num_lines)
}
count_words <- function(stanza) {
# should return an integer
num_words <- 0
print("counting words")
# to be implemented
return (num_words)
}
count_alphabetical<- function(stanza) {
# should return an integer
num_alpha <- 0
print("counting alphabetical characters")
# to be implemented
return (num_alpha)
}
count_punctuation <- function(stanza) {
# should return an integer
num_punct <- 0
print("counting punctuation characters")
return (num_punct)
}
analyze_poem <- function(poem) {
# return a data frame, one row per stanza
df <- tibble(
stanza = integer(),
num_lines = integer(),
num_words = integer(),
num_alpha = integer(),
num_punct = integer()
)
stanzas <- get_stanzas(poem)
for (i in 1:length(stanzas)) {
df <-
df |>
add_row(
stanza = i,
num_lines = count_lines(stanzas[i]),
num_words =  count_words(stanzas[i]),
num_alpha = count_alphabetical(stanzas[i]),
num_punct = count_punctuation(stanzas[i])
)
}
return(df)
}
analyze_poem(seuss)
analyze_poem(jabberwocky)
get_stanzas <- function(poem) {
# should return a vector of strings
stanzas <- c("stanza1", "stanza2") # represent each stanza as its own string
print("parsing  stanzas")
# to be implemented
return (stanzas) # return the vector of stanzas
}
count_lines <- function(stanza) {
# should return an integer
num_lines <- 0
print("counting lines")
# to be implemented
return (num_lines)
}
count_words <- function(stanza) {
# should return an integer
num_words <- 0
print("counting words")
# to be implemented
return (num_words)
}
count_alphabetical<- function(stanza) {
# should return an integer
num_alpha <- 0
print("counting alphabetical characters")
# to be implemented
return (num_alpha)
}
count_punctuation <- function(stanza) {
# should return an integer
num_punct <- 0
print("counting punctuation characters")
return (num_punct)
}
analyze_poem <- function(poem) {
# return a data frame, one row per stanza
df <- tibble(
stanza = integer(),
num_lines = integer(),
num_words = integer(),
num_alpha = integer(),
num_punct = integer()
)
stanzas <- get_stanzas(poem)
for (i in 1:length(stanzas)) {
df <-
df |>
add_row(
stanza = i,
num_lines = count_lines(stanzas[i]),
num_words =  count_words(stanzas[i]),
num_alpha = count_alphabetical(stanzas[i]),
num_punct = count_punctuation(stanzas[i])
)
}
return(df)
}
analyze_poem(jabberwocky)
analyze_poem(jabberwocky)
library(tidyverse)
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/jabberwocky.txt
jabberwocky <- read_file("jabberwocky.txt")
# important to look via print to understand invisible characters
print(jabberwocky)
# if you want to see the file as formatted
cat(jabberwocky)
analyze_poem <- function(poem) {
get_stanzas()
count_lines()
count_words()
count_alphabetical()
count_punctuation()
}
get_stanzas <- function() { print("parsing stanzas")}
count_lines <- function() { print("counting lines")}
count_words <- function() { print("counting words")}
count_alphabetical <- function() { print("counting alphabetical")}
count_punctuation <- function() { print("counting punctuation")}
analyze_poem(jabberwocky)
get_stanzas <- function(poem) {
# input: a single string representing one or more stanzas,
#        stanzas separated by newlines
# output: a vector of strings, each string representing a stanzas
stanzas <- c("stanza1", "stanza2") # place holder output
print("parsing  stanzas")  # to be implemented
return (stanzas)
}
count_lines <- function(stanza) {
# input: a single string representing a single stanza
#         each line separated by a newline
# output: an integer giving the number of lines in the stanza
num_lines <- 0
print("counting lines")
# to be implemented
return (num_lines)
}
count_words <- function(stanza) {
# input: a single string representing a single stanza
# output: an integer giving the number of words in the stanza
num_words <- 0
print("counting words")
# to be implemented
return (num_words)
}
count_alphabetical<- function(stanza) {
# input: a single string representing a single stanza
# output: an integer giving the number of alphabetical characters in the stanza
num_alpha <- 0
print("counting alphabetical characters")
# to be implemented
return (num_alpha)
}
count_punctuation <- function(stanza) {
# input: a single string representing a single stanza
# output: an integer giving the number of punctuation characters in the stanza
num_punct <- 0
print("counting punctuation characters")
return (num_punct)
}
analyze_poem <- function(poem) {
# input: a single string representing one or more stanzas,
#        stanzas separated by newlines
# output: a data frame, each row representing a stanza and the corresponding
#        metrics calculated above
df <- tibble(
stanza = integer(),
num_lines = integer(),
num_words = integer(),
num_alpha = integer(),
num_punct = integer()
)
# extract the stanzas
stanzas <- get_stanzas(poem)
# iterate over the stanzas with a for-loop
# growing the data frame by one row at a time
for (i in 1:length(stanzas)) {
df <-
df |>
add_row(
stanza = i,
num_lines = count_lines(stanzas[i]),
num_words =  count_words(stanzas[i]),
num_alpha = count_alphabetical(stanzas[i]),
num_punct = count_punctuation(stanzas[i])
)
}
return(df)
}
analyze_poem(jabberwocky)
get_stanzas <- function(poem) {
stanzas <- str_split_1(poem, "\n\n")
return (stanzas) # return the vector of stanzas
}
# Always test your functions, hopefully with several inputs
stanzas <- get_stanzas(jabberwocky)
stanzas
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_lines <- function(stanza) {
lines <- str_split_1(stanza, "\n")
# print(lines)
return (length(lines))
}
# ALWAY test!
count_lines(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_words <- function(stanza) {
words <-
stanza |>
str_squish() |>
str_split_1("\\s")
#print(words)
return (length(words))
}
# test your implementation!
count_words(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_alphabetical <- function(stanza) {
return (str_count(stanza, "[:alnum:]"))
}
# test your implementation!
count_alphabetical(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
count_punctuation <- function(stanza) {
return (str_count(stanza, "[:punct:]"))
}
# test your implementation!
count_punctuation(stanzas[1])
# now test analyze_poem with this new implementation
analyze_poem(jabberwocky)
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/cummings_anyone_lived_in_a_pretty_how_town.txt
cummings <- read_file("cummings_anyone_lived_in_a_pretty_how_town.txt")
# if you want to see the file as formatted
cat(cummings)
analyze_poem(cummings)
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/mistral_the_stranger.txt
mistral <- read_file("mistral_the_stranger.txt")
# if you want to see the file as formatted
cat(mistral)
analyze_poem(mistral)
library(tidyverse)
z <- tibble(first_name = character(), last_name = character())
z
z <- tibble(a = 1:5, b = 5:10, c = 10:15)
z <- tibble(a = 1:5, b = 5:10, c = 10:15)
z
z <- tibble(a = 1:5, b = 5:9, c = 10:15)
1:5
5:10
z <- tibble(a = 1:5, b = 5:9, c = 10:14)
z
x <- tibble(c = 1:5, a = 5:9, b = 10:14)
bind_rows(z,x)
analyze_poem()
analyze_poem(jabberwocky)
analyze_poem(jabberwocky) |> mutate(title = "Jabberwocky")
analyze_poem(jabberwocky) |> mutate(title = "Jabberwocky") -> jdf
analyze_poem(cummings) |> mutate(title = "Cummings") -> c.df
jdf
bind_rows(jdf, c.df)
x <- bind_rows(jdf, c.df)
x
x |> group_by(title) |> summarize(stanza_complexity = num_alpha / num_words)
x |> group_by(title) |> mutate(stanza_complexity = num_alpha / num_words)
x |> group_by(title) |> mutate(stanza_complexity = num_alpha / num_words) -> x
x
x <- bind_rows(jdf, c.df)
x |> group_by(title) |> mutate(stanza_complexity = num_alpha / num_words, punct_density = num_punct / num_lines) -> x
x
# URL for download
# https://raw.githubusercontent.com/Bio724D/Bio724D_2024_2025/refs/heads/main/data/jabberwocky.txt
jabberwocky <- read_file("Lewis_Carroll-Jabberwocky.txt")
# important to look via print to understand invisible characters
print(jabberwocky)
# if you want to see the file as formatted
cat(jabberwocky)
