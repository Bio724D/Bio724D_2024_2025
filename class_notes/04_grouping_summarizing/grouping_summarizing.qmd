---
title: "Grouping and summarizing in R"
author: "Bio724D: Fall 2024"
date: today

format: 
  html:
    theme: [default, custom.scss]
    df-print: paged
    toc: true
    toc-depth: 3    
    toc-expand: 3
    code-line-numbers: false
    embed-resources: true  
  revealjs:
    theme: [simple, custom.scss]
    df-print: paged
    scrollable: true
    slide-level: 2
    code-line-numbers: false
    embed-resources: true  
    output-file: grouping_pivoting_joins_revealjs.html    
execute:
  echo: true
  eval: true
  output: false
  warning: false
---

::: {.callout-note collapse="true"}
## Libraries

```{r}
#| echo: true
#| output: false
library(tidyverse)
```
:::

# Data


::: {.callout-note collapse="true"}
## Load data

We'll use the `penguins` data and the yeast colony morphology data that Greg introduced in the first part of this lecture.


```{r}
library(palmerpenguins)

yeast_URL <- "https://github.com/Bio724D/Bio724D_2024_2025/raw/main/data/seg_strain_table.csv"
yeast <- read_csv(yeast_URL)
glimpse(yeast)
```

:::

# Grouping

::: {.callout-note collapse="true"}
## Grouping using `group_by`

The function `group_by` "decorates" a data frame with grouping information:

-   `group_by` by itself doesn't do any further calculations

-   Multiple variables can be used in a grouping statement


After grouping, there is no visible restructuring of the data frame:

```{r}
yeast_grouped <-
  yeast |> 
  group_by(Pool)

# Use View() to view the group DF
# use glimpse or str to view the grouped df
```

In this second example, we group by both morphology and genotype:

```{r}
yeast_grouped2 <-
  yeast |>
  group_by(Pool, Cyr1.geno)

# as before, use glimpse to take a look at this df
```
:::

::: {.callout-note collapse="true"}
## Functions for exploring grouped data frames

Although a grouped data frame doesn't look different, its has additional information attached to it that affect how it works with group-aware operations. There are a variety of dplyr functions for querying a data frame about it's grouping structure (if any).

### `is.grouped_df`

You can check if a data frame is grouped using `is.grouped_df`

```{r}
is.grouped_df(yeast_grouped)
```

### `groups`

`groups` returns the variable(s) the data frame is grouped on:

```{r}
groups(yeast_grouped)
groups(yeast_grouped2)
```

### `group_keys`

`group_keys` returns a data frame describing the groups:

```{r}
group_keys(yeast_grouped)
group_keys(yeast_grouped2)
```

### `group_size`

`group_size` returns the number of observations in each group:

```{r}
group_size(yeast_grouped)
group_size(yeast_grouped2)
```
:::

::: {.callout-important collapse="true"}
## â˜… Grouping: Self exploration

Use the help and code exploration to understand what the functions `group_rows`, `group_indices` and `group_split` do.
:::

::: {.callout-note collapse="true"}
## Removing grouping information using `ungroup`

Grouping can be removed using the `ungroup` function:

```{r}
yeast_ungrouped <- ungroup(yeast_grouped)

is.grouped_df(yeast_ungrouped)
```
:::

# Counting and Summarizing

::: {.callout-note collapse="true"}
## Counting

The function `dplyr::count` when applied to a grouped data frame will return a data frame giving the count of observations per group:

```{r}
count(yeast_grouped2)
```

If counting is all you want to do, then you don't need to explicitly group before hand as the `count` function takes grouping variables as arguments:

```{r}
yeast |>
  count(Pool, Cyr1.geno)
```

When generating a table of counts on two or more grouping variables, the output is essentially a contingency table. We can turn this counts data frame into a more conventional contingency table layout using the `xtabs` function from base R:

```{r}
# NOTE: the underscore "_" in the call to 
# xtabs below is a placeholder you can use when
# the value you're passing in a pipe isn't the first
# argument to the function on the right. 

yeast |>
  count(Pool, Cyr1.geno) |>
  xtabs(n ~ Pool + Cyr1.geno, data = _)
```


:::

::: {.callout-note collapse="true"}
## Summarizing

The `summarize` function allows us to create group-wise data summaries. This is a very powerful tool for calculate summary statistics for marginal distributions.

```{r}
yeast_grouped2 |>
  summarize(nobs = n(),
            mean_Cyr1.exp = mean(Cyr1.expr, na.rm = TRUE),
            sd_Cyr1.exp = sd(Cyr1.expr, na.rm = TRUE))
```
:::

::: {.callout-note collapse="true"}
## Row-wise summaries

`summarize` works across rows, but sometimes you want to make calculations across columns. The `rowwise` function facilitates this:



```{r}
yeast |>
  rowwise() |>
  mutate(mean.Adhes = mean(c_across(starts_with("Adhes"))),
         mean.CM = mean(c_across(CM.a:CM.c))) 

# two different ways to select columns above
# Note that ranges can be fragile when data gets reordered
```
:::


# More complex operations on groups

For the following examples, we'll return to using the `penguins` data set. Remember to load the `palmerpenguins` data set first.

::: {.callout-note collapse="true"}
## `mutate` after `group_by`

`mutate` is "group aware", and will apply it's calculations in a group-wise manner on a grouped data frame.

Compare the following:

* Ungrouped data frame
```{r}
penguins |>
  mutate(deviation = body_mass_g - mean(body_mass_g, na.rm = TRUE)) |>
  pull(deviation) |> # pull is similar to $
  head(5)
```


* Grouped data frame
```{r}
penguins |>
  group_by(species) |>
  mutate(deviation = body_mass_g - mean(body_mass_g, na.rm = TRUE)) |>
  pull(deviation) |> # pull is similar to $
  head(5)
```


:::

::: {.callout-note collapse="true"}
## Applying functions by group using `group_map` and `group_modify`


Sometimes we want to do grouped operations that are relatively complex, such as fitting a linear regression to sub-groups within the data.  

This is relatively easy to generate a plot such as this in ggplot.

```{r}
#| output: true

penguins |>
  filter(!is.na(sex)) |>
  ggplot(aes(x = body_mass_g,
             y = flipper_length_mm,
             color = species,
             shape = sex)) +
  geom_point(alpha = 0.5) + 
  geom_smooth(method = lm, alpha=0.5)

```

ggplot is clearly fitting 6 different linear models to the grouped data (sex and species) "behind the scenes".  How could we do these calculations succinctly and efficiently ourselves? The function `group_map` and `group_modify` are useful to solve this problem.


`group_map` applies an arbitrary function to the groups in a grouped data frame, and returns the results in the form of a list.  Here's an example of using `group_map` to fit linear models to every combination of species and sex in the 

```{r}

penguins_by_species_sex <-
  penguins |>
  filter(!is.na(sex)) |>
  group_by(species, sex)

lm_by_species_sex <-
  penguins_by_species_sex |>
  group_map(~lm(flipper_length_mm ~ body_mass_g, data = .x))

lm_by_species_sex

```

`group_modify` is similar to `group_map` but requires that the output of the function is a data frame.  Since the `lm` function does not return it's results in the form of a data frame,  we turn to a package called [`broom`](https://broom.tidymodels.org/index.html) which is a library that turns model fit output into data frames for us.  Broom has three basic functions: `tidy`, `glance`, and `augment`.  Here we use the `tidy` function to report information about the coefficients of the linear models that are fit to each group in the data:



```{r}
library(broom)

lm_by_species_sex_df <-
  penguins_by_species_sex |>
  group_modify(~ broom::tidy(lm(flipper_length_mm ~ body_mass_g, data = .x)))

lm_by_species_sex_df
```


:::



::: {.callout-note collapse="true"}
## Extended example: ANOVA visualized

```{r}
#| output: true

clean_penguins <-
  penguins |>
  filter(!is.na(sex))

penguins_grand <-
  clean_penguins |>
  summarize(mean_bodymass = mean(body_mass_g))

penguins_group <-
  clean_penguins |>
  group_by(species) |>
  summarize(mean_bodymass = mean(body_mass_g))  

```


```{r}
#| output: true

jitterpos <- position_jitter(width=0.25, height=0,
                             seed = 20240917)

clean_penguins |>
  ggplot(aes(x = species, y = body_mass_g,
             color = species)) +
  geom_point(position = jitterpos, alpha=0.5) +
  ylim(2500,6500) +
  labs(title = "Body mass by species")  
  
```

```{r}
#| output: true

p_total <-
  clean_penguins |>
  ggplot(aes(x = species, 
             y = body_mass_g,
             color = species)) +
  geom_point(position = jitterpos, 
             alpha=0.5,
             size=0.5) +   
  geom_linerange(aes(ymin = penguins_grand$mean_bodymass,
                     ymax = body_mass_g),
                 position = jitterpos,
                 alpha=0.5) +
  geom_hline(yintercept = penguins_grand$mean_bodymass, linetype='dashed') +
  ylim(2500,6500) +
  labs(title = "Deviation of observations\naround the grand mean")

p_total
```

```{r}
#| output: true

p_between <-
  penguins_group |>
  ggplot(aes(x = species,
             y = mean_bodymass,
             color = species)) +
  geom_point(size = 3) +
  geom_linerange(aes(ymin = penguins_grand$mean_bodymass,
                     ymax = mean_bodymass),
                 alpha=0.75, size=2) +  
  geom_hline(yintercept = penguins_grand$mean_bodymass, 
             linetype='dashed') +
  ylim(2500,6500) +
  labs(title = "Deviation of group means\naround the grand mean")
  
p_between
  
```



```{r}
#| output: true


p_within <-
  clean_penguins |>
  group_by(species) |>
  mutate(group_mean_bodymass = mean(body_mass_g, na.rm = TRUE)) |>
  ggplot(aes(x = species, 
             y = body_mass_g,
             color = species)) +
  geom_point(position = jitterpos, 
             alpha=0.35,
             size=0.5) +   
  geom_linerange(aes(ymin = group_mean_bodymass,
                     ymax = body_mass_g),
                 position = jitterpos,
                 alpha=0.35) +
  geom_point(data = penguins_group,
             aes(x = species, y = mean_bodymass),
             size = 3) +
  ylim(2500,6500) +
  labs(title = "Deviation of observations\naround group means")


p_within
```

```{r}
#| fig-width: 12
#| fig-height: 4
#| output: true


library(patchwork)

combined <- (p_total + theme(legend.position = "none")) + 
  (p_between + theme(legend.position = "none")) +
  (p_within + theme(legend.position = "none")) 

combined
```

:::