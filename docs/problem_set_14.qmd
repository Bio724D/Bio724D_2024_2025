---
title: "Problem Set 14: Introduction to Unix (updated)"
author: "Greg Wray"
date-format: iso
format: 
  html:
    embed-resources: true
editor: source
---


# Instructions

Create a Quarto markdown document and answer the questions below using code blocks that generate the correct outputs. We encourage you to include explanatory text in your markdown document, however **each of your solutions should show how to generate the answer using the Unix command line**. 

Write "robust" solutions wherever possible. A good rule of thumb for judging whether your solution is appropriately "robust" is to ask yourself "If I added additional observations or variables to this data set, or if the order of variables changed, would my code still compute the right solution?"

Make sure your markdown is nicely formatted -- use headers, bullets, numbering, etc so that the structure of the document is clear.

Make sure to "Render" your document before submission to confirm that all code blocks and formatting is as you expect.

When completed, title your markdown file as follows (replace `XX` with the assignment number, e.g. `01`, `02`, etc):

-   `netid-assignment_XX-Spring2025.qmd`

Submit both your markdown file and the generated HTML document via the Assignments submission section on Sakai.


## Problems

For this problem set, we will be using your VM and working with the information in `example_directory` that Paul introduced in class. Begin by starting your VM, logging in, and transferring `example_directory` onto your VM with Cyberduck. Within `example_directory`, create a new directory called `practice` and navigate to this directory (in other words, make `practice` your working directory). When a problem asks you provide code, it should work from this location; if the problem requires you to do something in another directory, provide a path to that directory in your code, don't navigate there. 

1. Show the commands that you would use to carry out the following file operations. In each case, you should be able to carry out the operation with a single command and without navigating out of `practice` as your working directory. 

* Create a directory in `~/example_directory/foo` called `wombat`.

* Create a directory in your current location called `kanga` that contains a subdirectory called `roo`. 

* Make a copy of the directory `~/example_directory/bar` and its contents in your current location.

* Change name of the copied directory `bar` in your current location (not the original one) to `koala`.

* Move the directory `~/example_directory/foo/wombat` that you created earlier into your current directory. 

2. When you make many files that contain similar data, it is good practice to have all the file names be the same length, as this results in correct ordering when you sort or display them. For instance, if you have dozens of files, name the first file `data_01.txt` rather than `data_1.txt`. This is known as padding with zeros. The number of zeros depends on how many files you anticipate working with. Imagine a situation where you need 200 files. 

* Show the command that creates 200 empty files with names in the format `data_001.txt` through `data_199.txt`. You should be able to create all 200 files with just 1 command. Use `ls` to make sure you have all the files that you expected. 

* Imagine a situation where you later realize that you only need the first 150 files. Show the single command that deletes files `data_151.txt` through `data_199.txt`. 

3. Learning how to get help for Unix commands is an essential skill. Even experienced Unix users frequently refer to help pages. Some commands have over 50 options and no one can remember all of them. Refer to the `man` page for `date` to learn about this simple but useful command. 

* Run the commands `date` and `date -r` and compare their output. What is RFC format? What is the meaning of the last block of characters (-0500)?

* Show the command that uses `date` to return the current time in UTC (Universal or Greenwich Meridian time zone ). 

* Show the command that uses `date` to return the date that `~/example_directory/foo` was last modified. Can you think of a situation where this might be useful?

4. (Updated) Practice getting help with another Unix command: `tr`. Use the `man` page to learn how this command can be useful for processing text files. 

* Each man page starts with an entry called `NAME` that provides the name of the command and a brief description of what it does. This description is very brief: it useful as a reminder for someone who has used the command in the past, but less helpful if you are completely unfamiliar with the command. Read the man page to gain a clear understanding of what `tr` does. Try out a few options to get a feel for how it works. Write a longer description that is useful for someone who has never heard of the command before.

* Next, use your understanding of `tr` to process the `VoyageOfTheBeagle.txt` file. Show the command that uses `tr` to convert every instance of `B` to `b`.  

* Show the command that uses `tr` to delete every instance of `*`. 

* Show the command that uses `tr` to squeeze every instance of `--` to `-`. 

5. Redirection is one of the simple yet powerful features of Unix. Show the commands that you would use to carry out the following operations:

* Create an empty file in your current location called `bilby.txt`. 

* Use `echo` and the redirect operator to add your name to the first line of this file.

* Use the redirect append operator and `date` to add the current date to this file.

6. Navigate to the directory `~/example_directory/foo`. Explain the different results you expect when using the following commands. (Hint: you can try them out if you are not sure. However, most of these commands will alter the organization of files, so remember to re-set everything back to the original state before trying the next command. To save a copy of the current directory structure, redirect `ls -a` for `~/example_directory/foo` and `~/example_directory/bar` into a text file that you create; these are the only directories that will be affected.)

* `$ mv rocky-the-movie.txt ../bar` and `$ cp rocky-the-movie.txt ../bar`

* `$ mv rocky-the-movie.txt ../bar` and `$ mv rocky-the-movie.txt another.txt`

* `$ cp rocky-the-movie.txt ../bar/another.txt` and `$ cp rocky-the-movie.txt another.txt` 


