---
title: "BIO724D: SQL: Introduction to Queries"
author: "Greg Wray"
date: "`r Sys.time()`"
format: 
  html:
    embed-resources: true
editor: source
---

## Background 

SQL (**S**tructured **Q**uery **L**anguage) is a set of rules that define the syntax used to build, update, query, and manage a relational database. Many different software packages that offer relational database capabilities follow these rules. In computer science terms, SQL is a *specification* that defines a set of standards, and the software packages are *implementations* of those standards. 

For class, we will be using **SQLite**, which claims to be the most widely used implementations of the SQL standard. Many applications on your computer, phone, and perhaps your watch, use SQLite to manage calendars, playlists, contacts, to-do items, shopping carts, and much more. You can learn about some of the many deployments of SQLite [here](https://www.sqlite.org/famous.html). 

SQLite is also a popular implementation for learning SQL, because it simplifies many of the technical details involved in setting up a relational database. If you decide to use relational databases in your future research, you may want to use a more powerful implementation, such as **PostgreSQL** or **DuckDB**. Both are open-source and free; PostgreSQL is widely implemented in research and commercial settings, while DuckDB is a newer implementation designed specifically for data science. Both are more scalable, flexible, and powerful than SQLite; however, this comes with added complexity in setting up a database.  

For the SQL class sessions, we will work with field observations. This will allow us to bring in some new data types, including dates and geolocations, that we can explore later with R. The relational database we will be working with is Greg's birding observations. See the slide deck for information about the tables, their contents, and their relations.


## Set-up

To use SQLite within a Quarto notebook, you will first need to install two packages: **RSQLite**, an implementation of SQL for R, and **DBI**, which provides interfaces to many different implementations of SQL. Make sure you install both packages before proceeding (as usual, code for installing packages is not included in the notebook). 

This notebook uses a combination of R and SQL code to define the 7 tables that make up the birding database. Run the entire notebook by clicking on the **Run** icon at the top right of the RStudio window with the Quarto notebook code and select "Run all" (the last item on the menu). You should see 8 objects appear in the global environment: **con** (the connection between R and SQL) and **7 data frames** with the contents of the 7 `.csv` files. You won't be able to see the SQL tables in the global environment, but you can access them through SQL code.  

Note: this code block runs silently. 
```{r label=set-up}
# load packages
library(tidyverse)
library(DBI)

# establish connection to in-memory database
con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")

# tell knitr about the connection
knitr::opts_chunk$set(connection = "con")
```


### Creating SQL code blocks
Now we can SQL code directly in Quarto code blocks. Every time we do this, we'll need to tell Quarto that we want to use a different language (SQL) and the name of the connection to the in-memory database. Make sure that the header of every code where you want to use SQL is what is shown below. Refer to the Quarto notebook to see this in a real code block, as the html version doesn't show it.

```
{sql, connection=con}
```

### Build and populate the `observations` table

```{sql, connection=con}
-- create the observations table
CREATE TABLE observations (
  seq INT PRIMARY KEY,
  genus_ioc VARCHAR(32) NOT NULL,
  species_ioc VARCHAR(32) NOT NULL,
  subspecies_ioc VARCHAR(32) NOT NULL,
  date_obs VARCHAR(10),
  time_obs VARCHAR(48),
  location_name VARCHAR(24),
  trip_name VARCHAR(16),
  notes VARCHAR(256)
);
```

```{sql, connection=con}
SELECT * FROM pragma_table_info ('observations');
```

```{r, warning=FALSE}
# read data into the observations table
observations <- read_csv("s_observations.csv", show_col_types = FALSE)
observations$date_obs <- as.character(observations$date_obs)
copy_to(dest = con, df = observations, name = "observations", append = TRUE)
```

```{sql, connection=con}
SELECT * FROM observations WHERE location_name = 'Durham';
```

### Build and populate the `locations` table

```{sql, connection=con}
-- create the locations table
CREATE TABLE locations (
  location_name VARCHAR(24) PRIMARY KEY,
  province VARCHAR(48),
  country_name VARCHAR(48),
  bioregion_name VARCHAR(24),
  climate VARCHAR(3),
  protection VARCHAR(1),
  earliest VARCHAR(10),
  latest VARCHAR(10)
);
```

```{sql, connection=con}
SELECT * FROM pragma_table_info ('locations');
```

```{r, warning=FALSE}
# read data into locations table
locations <- read_csv("s_locations.csv", show_col_types = FALSE)
locations$earliest <- as.character(locations$earliest)
locations$latest <- as.character(locations$latest)
copy_to(dest = con, df = locations, name = "locations", append = TRUE)
```

```{sql, connection=con}
SELECT * FROM locations;
```

### Build and populate the `trips` table

```{sql, connection=con}
-- create the trips table
CREATE TABLE trips (
  trip_name VARCHAR(16) PRIMARY KEY,
  start_date VARCHAR(10),
  end_date VARCHAR(10)
);
```

```{sql, connection=con}
SELECT * FROM pragma_table_info ('trips');
```

```{r, warning=FALSE}
# read data into trips table
trips <- read_csv("s_trips.csv", show_col_types = FALSE)
trips$start_date <- as.character(trips$start_date)
trips$end_date <- as.character(trips$end_date)
copy_to(dest = con, df = trips, name = "trips", append = TRUE)
```

```{sql, connection=con}
SELECT * FROM trips;
```

### Build and populate the `species` table

```{sql, connection=con}
-- create the species table
CREATE TABLE species (
  seq INT PRIMARY KEY,
  genus_ioc VARCHAR(32) NOT NULL,
  species_ioc VARCHAR(32) NOT NULL,
  num_spp INT,
  familiar_ioc VARCHAR(64),
  conservation VARCHAR(2),
  endemic VARCHAR(32)
);
```

```{sql, connection=con}
SELECT * FROM pragma_table_info ('species');
```

```{r, warning=FALSE}
# read data into species table
species <- read_csv("s_species.csv", show_col_types = FALSE)
copy_to(dest = con, df = species, name = "species", append = TRUE)
```

```{sql, connection=con}
SELECT * FROM species WHERE genus_ioc LIKE 'At%';
```

### Build and populate the `genera` table

```{sql, connection=con}
-- create the genera table
CREATE TABLE genera (
  genus_ioc VARCHAR(32) PRIMARY KEY,
  seq INT NOT NULL,
  family_ioc VARCHAR(32) NOT NULL,
  familiar_genus VARCHAR(64),
  taxonomy VARCHAR(128),
  num_sp INT
);
```

```{sql, connection=con}
SELECT * FROM pragma_table_info ('genera');
```

```{r, warning=FALSE}
# read data into the genera table
genera <- read_csv("s_genera.csv", show_col_types = FALSE)
copy_to(dest = con, df = genera, name = "genera", append = TRUE)
```

```{sql, connection=con}
SELECT * FROM genera WHERE genus_ioc LIKE 'At%';
```

### Build and populate the `families` table

```{sql, connection=con}
-- create the families table
CREATE TABLE families (
  family_ioc VARCHAR(32) PRIMARY KEY,
  seq INT NOT NULL,
  order_ioc VARCHAR(32),
  familiar_family VARCHAR(64),
  niche VARCHAR(64),
  taxonomy VARCHAR(128),
  num_gen INT,
  num_spp INT,
  num_spp_x INT,
  num_threat INT
);
```

```{sql, connection=con}
SELECT * FROM pragma_table_info ('families');
```

```{r, warning=FALSE}
# read data into the families table
families <- read_csv("s_families.csv", show_col_types = FALSE)
copy_to(dest = con, df = families, name = "families", append = TRUE)
```

```{sql, connection=con}
SELECT * FROM families WHERE family_ioc LIKE 'D%';
```

### Build and populate the `orders` table

```{sql, connection=con}
-- create the orders table
CREATE TABLE orders (
  order_ioc VARCHAR(32) PRIMARY KEY,
  seq INT NOT NULL,
  familiar_ioc VARCHAR(64),
  taxonomy VARCHAR(128) 
);
```

```{sql, connection=con}
SELECT * FROM pragma_table_info ('orders');
```

```{r, warning=FALSE}
# read data into the orders table
orders <- read_csv("s_orders.csv", show_col_types = FALSE)
copy_to(dest = con, df = orders, name = "orders", append = TRUE)
```

```{sql, connection=con}
SELECT * FROM orders;
```

## Simple queries

`SELECT` is the workhorse of data retrieval in SQL. It can be used in simple constructions with a single table or in complex statements that involve grouping, summaries, aliases, functions, nested queries, and joins between multiple tables. We will start by working with data in a single table to introduce basic filtering and output capabilities.

Every `SELECT` statement includes two components: the column(s) to return and the table(s) to work with. The simplest possible `SELECT` statement is shown below. The `*` character means return all columns. The `FROM` clause tells SQL which table you want to work with. 

**All rows, all columns.** The default behavior of `SELECT` is to return all rows unless you tell it otherwise. Thus, this query returns all of the data in the `orders` table.
```{sql, connection=con}
-- return all data from orders table
SELECT * FROM orders; 
```
**Limiting output.** If you just want to see a few rows, include the keyword `LIMIT` and specify the number of rows. 
```{sql, connection=con}
-- return just 3 rows
SELECT * FROM orders LIMIT 3; 
```
**Specifying columns.** If you just want to see a subset of columns, replace `*` with the column name(s) separated by commas. SQL will return them in the order you specify. 
```{sql, connection=con}
-- return just two columns in a different order
SELECT seq, order_ioc FROM orders; 
```
**Sorting output.** An important feature of relational databases is that the rows (records) are not stored in a predictable or even stable order. This allows for faster filter and sort operations, but it does mean that you need to be explicit when you want results returned in a particular order.

To sort output, include `ORDER BY` and specify the column(s) to sort on. If you provide more than one column name, SQL will sort on the first column and then use the second column to break any ties, and so forth. To sort in reverse order, include `DESC` (short for descending).
```{sql, connection=con}
-- return data sorted by one column in descending order
SELECT * FROM orders ORDER BY familiar_ioc DESC; 
```
`LIMIT` and `ORDER BY` are examples of optional clauses in a `SELECT` statement. Clauses can be combined, but they need to be in a specific order. As we build increasingly complex `SELECT` statements, be sure to follow the order of clauses in the examples.

The following example combines all of the optional features we have covered so far. 
```{sql, connection=con}
-- return results in a customized way
SELECT seq, order_ioc FROM orders ORDER BY familiar_ioc DESC LIMIT 3; 
```

**SQL syntax basics.** Before moving on, a couple of notes about SQL syntax:

* SQL commands are *case-insensitive*. However, the convention is to use upper-case for keywords, operators, and functions, and use to lower case for identifiers (table and column names). Writing your SQL code this way will make it more readable.

* In contrast, search strings in SQL are generally *case-sensitive*, because case may matter in your data. The main exception is the `LIKE` operator (see below).

* To insert a comment, start a line with `--` (double dash). You can also make the rest of a line a comment by inserting `--` after a command.

* End each command with the `;` (semicolon) character. 

## Conditions in queries
Often, we want to filter rows based on a condition. Include a `WHERE` clause to specify the condition you want to use for filtering.

Follow `WHERE` with the name of the column to apply the condition to, then the condition itself. To search for a match to a value, use the `=` operator. (Note the difference from R, which uses `==` in conditions.)  
```{sql, connection=con}
-- return the records for every species observed within a given genus
SELECT * FROM species WHERE genus_ioc = 'Bubo';
```
When constructing a condition, logical, arithmetic, and set operators work as expected. Brackets can be used to indicate compound conditions. Conditions can be applied to a single column or to multiple columns using logical operators.

The examples below illustrate some of the ways to specify conditions for filtering. 
```{sql, connection=con}
-- return the rows where a genus contains greater than 40 species
SELECT genus_ioc, num_sp FROM genera WHERE num_sp > 40;
```

```{sql, connection=con}
-- return rows containing families with names that alphabetically follow a specified word
SELECT genus_ioc, family_ioc, num_sp FROM genera WHERE genus_ioc > 'Vireo' ORDER BY genus_ioc;
```

```{sql, connection=con}
-- return rows containing families that are part of a specified set
SELECT genus_ioc, familiar_genus FROM genera WHERE family_ioc IN ('Todidae', 'Momotidae', 'Meropidae');
```

```{sql, connection=con}
-- return rows containing families that contain more than 50 species and contain fewer than 10 genera
SELECT family_ioc, familiar_family, num_spp FROM families WHERE num_spp > 50 AND num_gen < 10;
```
If you want to search a range of values, it is sometimes helpful to use the `BETWEEN` operator, which can work with strings and numbers. For strings, bear in mind that alphabetical sorting puts longer strings after shorter ones. Thus, if you only include one letter, no longer strings that begin with that letter will be returned. 
```{sql, connection=con}
-- return rows with genus names that start with 'J', 'K' or 'L' 
SELECT genus_ioc, familiar_genus FROM genera WHERE genus_ioc BETWEEN 'J' AND 'L';
```
Note the absence of any genera starting with "L". Extend the range to "M" to return genera starting with "L". 

For numeric values, `BETWEEN` works exactly as you would expect it to.
```{sql, connection=con}
-- return genera that contain between 28 and 29 species 
SELECT genus_ioc, num_sp FROM genera WHERE num_sp BETWEEN 28 AND 30;
```
To filter based on partial matches to strings, use the `LIKE` operator and the expansion character `%` (percent) to indicate "anything". The expansion character can precede or follow the search sub-string (or both). Note that `LIKE` is unusual in that it is *not* case-sensitive; this is by design so that the search sub-string can occur at the beginning or middle of words.  
```{sql, connection=con}
-- return rows where family name starts with 'Str'
SELECT genus_ioc, familiar_genus FROM genera WHERE genus_ioc LIKE 'Str%';
```
```{sql, connection=con}
-- return rows where family name contains with 'colap'
SELECT genus_ioc, familiar_genus FROM genera WHERE genus_ioc LIKE '%colap%';
```

## Summarizing and grouping data

SQL offers powerful summarizing and grouping capabilities that have inspired packages in other languages (`dplyr` is designed to replicate some SQL functionality). We will explore summarzing and grouping using a single table for simplicity, but bear in mind that these operations can also be applied to the output of multi-table queries, such as those covered in later sections of this notebook.

You can quickly get basic information about a numeric column using summary functions: `MIN`, `MAX`, `SUM`, and `AVG`. SQL functions work similarly to those in R: indicate what you want to pass to the function by enclosing in round brackets. 

Note that SQL automatically assigns a column name for values that it computes.
```{sql, connection=con}
-- return the largest number of genera in a single family
SELECT AVG(num_gen) FROM families;
```
To see which family contains the most genera, include the column name with the summary function.
```{sql, connection=con}
-- return the largest number of genera in a single family and the name of that family
SELECT family_ioc, MAX(num_gen) FROM families;
```
`MIN` and `MAX` also work with character values. 
```{sql, connection=con}
-- return the first and last genus in alphabetical order
SELECT MIN(genus_ioc), MAX(genus_ioc) FROM genera;
```
A surprisingly useful SQL function is `COUNT.` Use can use count to learn how many records (rows) are in a table
```{sql, connection=con}
-- return the number of records in the families table
SELECT COUNT(*) FROM families;
```
or the number of rows that match a particular condition.
```{sql, connection=con}
-- return the number of families that start with the letter "M"
SELECT COUNT(*) FROM families WHERE family_ioc LIKE "M%";
```
To aggregate rows by value, use a `GROUP BY` clause and specify column or columns to use. This clause follows the `FROM` or `WHERE` clause (if present) and precedes `ORDER BY` and `LIMIT` clauses (if present). 

The following query returns the top 10 locations with the most observations in the database.  It groups by location name, tallies the number of observations at each location using the `COUNT` function, and then sorts in descending order and limits the return to 10 records. 

As queries become more complex, it is common to use multiple lines and indenting to improve readability.
```{sql, connection=con}
-- return the number of records at each location
SELECT
  location_name,
  COUNT(*)
FROM
  observations
GROUP BY
  location_name
ORDER BY
  COUNT() DESC           -- just the top 10 locations
LIMIT 
  10;
```
Another useful function is `DISTINCT.` Use it to return the number of unique entries in a column. `DISTINCT` can be combined with `COUNT` and `GROUP BY` for powerful summarizing queries.

The example nests `DISTINCT` within `COUNT` to return the number of unique locations. The WHERE clause uses AND to create a compound condition that narrows the filtering to one species. 
```{sql, connection=con}
-- returns the number of locations where a given species has been observed
SELECT
  genus_ioc,
  species_ioc,
  COUNT(DISTINCT (location_name))
FROM
  observations
WHERE
  genus_ioc = 'Falco'
  AND species_ioc = 'tinnunculus'
GROUP BY
  genus_ioc,
  species_ioc;
```

## Aliases

Looking at the results of the queries in the previous section, it's clear that the column labels that SQL assigns automatically are not ideal. Using more intuitive labels makes output easier to interpret. To do this, we can assign an *alias* using the keyword `AS` followed by a name. Aliases without any spaces do not need quotes. 

A second important use for aliases is to simplify table names. We will see examples later, when we get to queries that involve multiple tables.

Note that aliases are not saved in memory; they apply only to the current query.

The following query returns the number of species that have been observed within each genus, and sorts them in reverse order. SQL will use the two alias in the `SELECT` clause as column headers in the output. Note that any alias introduced in the `SELECT` clause must also appear in the `ORDER BY` clause. Also note the location of the `DESC` keyword (try placing it after genus and see what happens).
```{sql, connection=con}
-- return the number of species observed within each genus ranked by number observed
SELECT
  genus_ioc AS genus,           -- define the aliases here and next line
  COUNT(*) AS species_seen
FROM
  species
GROUP BY
  genus_ioc
ORDER BY
  species_seen DESC,            -- use the aliases here and next line
  genus
LIMIT
  10;
```
Another helpful way to label output is to use the function `CONCAT` to create strings that can be assigned to an alias. Strings can contain a mix of column values and whatever you provide. Enclose your text in quotes and separate items with commas.

With the current database, genus and species names are stored separately, so `CONCAT` is particularly useful for combining them into a single column when returning the results of a query.

The following query returns the date on which each species was first observed. It uses `CONCAT` to create a column header by joining the genus and species names, separated by a space for readability. Also note that the second alias requires quotes because it contains a space.

```{sql, connection=con}
-- returns the first observation of each species in a given genus and labels the output
SELECT
  CONCAT(genus_ioc, ' ', species_ioc) AS species,
  MIN(date_obs) AS 'first seen'
FROM
  observations
WHERE
  genus_ioc = 'Trogon'
GROUP BY
  genus_ioc,
  species_ioc
ORDER BY
  MIN(date_obs)
;
```
By combining aliases and grouping functions, it is possible to create reports that summarize several different kinds of information. 

Building on the previous query, the query below asks for additional details about the first sightings to provide additional context.
```{sql, connection=con}
-- returns the first observation of each species within a given genus with additional context
SELECT
  CONCAT (genus_ioc, ' ', species_ioc) AS species,
  COUNT(seq) AS '# sightings',
  MIN(date_obs) AS 'first seen',
  MAX(date_obs) AS 'last seen',
  COUNT(DISTINCT (location_name)) AS '# places',
  COUNT(DISTINCT (subspecies_ioc)) AS '# subspecies'
FROM
  observations
WHERE
  genus_ioc = 'Falco'
GROUP BY
  genus_ioc,
  species_ioc;
```

## Nested queries

Nested queries are useful when we want to first narrow a search, then query the results in a different way. The two queries With nested queries, the "inner" query is executed first, followed by a second "outer" query that only considers the rows returned by the first query. 

The inner query is embedded within a `WHERE` clause in the outer query, which uses the `IN` operator to test for membership in the results of the inner query. Importantly, the two queries can access information in different tables. There is no limit on nesting in queries, but best practice is to limit nesting to 2 or 3 levels; there are better ways to deal with highly complex queries than deep nesting. 

Nested queries are particularly useful in this database, because the taxonomic tables represent nested taxa.

The query below returns the name of every species that has been observed within a given family. This information is stored in multiple tables: the `genera` table has a column that assigns every genus to a family. It first queries the `genera` table to retrieve a list of all genera in the family of interest. Next, it queries the `species` table to retrieve the genus and species names of every entry in the list returned by the first query. 
```{sql, connection=con}
-- return the names of all species observed in a given family
SELECT -- this SELECT returns rows that match the set returned by the nested query
  CONCAT (genus_ioc, ' ', species_ioc) AS species,
  familiar_ioc AS 'common name'
FROM
  species
WHERE
  genus_ioc IN (
    SELECT genus_ioc                   -- beginning of the nested query (executes first)
    FROM genera
    WHERE family_ioc = 'Lybiidae'
    ORDER BY seq
  )                                    -- end of the nested query
GROUP BY
  genus_ioc,
  species_ioc,
  familiar_ioc
ORDER BY
  genus_ioc,
  species_ioc
LIMIT
  10;
```
Nested queries can also be useful for tabulating counts from multiple tables into a single report. To do this, use `SELECT` as a "wrapper" for multiple nested queries.

The query below demonstrates the use of `SELECT` as a wrapper to generate a report. Note that there is no table name in the outer query. Second, it demonstrates how to access a built-in variable using `SELECT`. Retrieving the value of DATE provides a date stamp on the output. If we want to save this output, we now have a record of when the query was made.
```{sql, connection=con}
-- comment
-- return the number of species observed and the total number recognized
SELECT
  (SELECT DATE()) AS 'as of',
  (SELECT COUNT(*) FROM species) AS 'species observed',
  (SELECT SUM(num_spp) FROM families) AS 'out of a total of'
;
```

### Joins

The real power of SQL is its ability to query data from multiple tables at once using (relatively) simple statements. This can be done by including a `JOIN` clause that specifies how to merge results and specifies one or more relations that link one or more columns between two or more tables.

The most commmon kind of join is a left join, where every row from the first table is returned, attached to any row from the second table where a value matches a row in the relation column(s) of the first table. If there is no match in the second table, NULL values will be inserted. Left joins allow for a one-to-many relationship between rows in the first table to those in the second table: a row from the first table might appear multiple times if more than one row in the second table contains matching values in the related column. 

Left joins are perfect for the taxonomic tables in the database, which have an inherently nested structure: every higher taxon contains at least one lower taxon. Left joins are also useful for the `observations` table, where multiple records may be related to a single species or trip or location.

It is often the case that the same column name appears in multiple tables within a relational database. To make explicit which column of the same name you wish to reference, simply append the table name and a `.` (dot) before the column name. Columns specified in this way are said to be **fully qualified**. When writing queries that involve multiple tables, you only need to fully qualify if a column name exists in more than one table. However, fully qualifying is always allowed even when not needed, and doing so can make the logic of a query clearer.

When dealing with multiple tables, using aliases for table names can help to simplify a query. A common convention is to use a single letters corresponding the table's full name.

Most versions of SQL accept more than one syntax for indicating a join. We'll use the newer and recommended syntax, but be aware that other ways to specify joins exist and are commonly used. Also be aware that it is possible (but not recommended) to create implicit joins by leaving out the JOIN keyword and simply specifying one or more relations in a WHERE clause. This produces a cross join, which can work in simple queries but is often not what you actually want. You will likely encounter both alternative approaches if you refer to code from ChatGPT or StackOverflow. Best practice is to always use explicit joins and the syntax introduced below.

The query below returns the scientific and common names of every observed species in a given family. The information needed to do this resides in two different tables: `species` and `genera`. The query   left joins the genera table onto the species table, providing information about which family that species belongs to. It then filters by family name.   
```{sql, connection=con}
-- returns a list of all observed species from a given family
SELECT
  species.genus_ioc AS genus, 
  species.species_ioc AS species,
  species.familiar_ioc AS 'common name'
FROM species
  LEFT JOIN genera 
  ON species.genus_ioc = genera.genus_ioc
WHERE
  genera.family_ioc = 'Caprimulgidae'
ORDER BY
  genera.seq
LIMIT
  20;
  ;
```
The next query reports how many species have been observed from each genus relative to the total. It joins the genus and species tables and returns three numbers, each derived in a different way: (1) a tally of the number of species observed, using `GROUP BY` and the `COUNT` function; (2) the total number of species in that genus, read directly from the genus.num_spp column; and (3) a computed value (yes, you can do math with SQL!).
```{sql, connection=con}
-- returns the proportion of species observed within each genus
SELECT
  species.genus_ioc AS genus,
  COUNT(species_ioc) AS 'recorded species',
  genera.num_sp AS 'total species',
  ROUND(((COUNT(species_ioc) + 0.0) / genera.num_sp), 3) * 100 AS 'percent recorded'
FROM species
  LEFT JOIN genera 
  ON species.genus_ioc = genera.genus_ioc
GROUP BY
  genera.seq,
  species.genus_ioc,
  genera.num_sp
ORDER BY
  genera.seq
  ;
```
